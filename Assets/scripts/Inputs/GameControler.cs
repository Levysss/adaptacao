//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/scripts/Inputs/GameControler.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameControler: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControler()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControler"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""3ff8ead2-9062-4be9-a824-6c748dc30673"",
            ""actions"": [
                {
                    ""name"": ""Atack1"",
                    ""type"": ""Button"",
                    ""id"": ""6f0ace6f-2b06-4b0e-a880-f5e43b863824"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Atack2"",
                    ""type"": ""Button"",
                    ""id"": ""d9b9e9cf-e4d9-4a03-b81f-d5e179d2cbf1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""400f4be1-f8c0-47f2-a2e1-0d1a96c36d06"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Atack1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aafe0e5c-d9fd-480f-b534-13b882251e94"",
                    ""path"": ""<Keyboard>/numpad0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Atack2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_Atack1 = m_Game.FindAction("Atack1", throwIfNotFound: true);
        m_Game_Atack2 = m_Game.FindAction("Atack2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
    private readonly InputAction m_Game_Atack1;
    private readonly InputAction m_Game_Atack2;
    public struct GameActions
    {
        private @GameControler m_Wrapper;
        public GameActions(@GameControler wrapper) { m_Wrapper = wrapper; }
        public InputAction @Atack1 => m_Wrapper.m_Game_Atack1;
        public InputAction @Atack2 => m_Wrapper.m_Game_Atack2;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void AddCallbacks(IGameActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
            @Atack1.started += instance.OnAtack1;
            @Atack1.performed += instance.OnAtack1;
            @Atack1.canceled += instance.OnAtack1;
            @Atack2.started += instance.OnAtack2;
            @Atack2.performed += instance.OnAtack2;
            @Atack2.canceled += instance.OnAtack2;
        }

        private void UnregisterCallbacks(IGameActions instance)
        {
            @Atack1.started -= instance.OnAtack1;
            @Atack1.performed -= instance.OnAtack1;
            @Atack1.canceled -= instance.OnAtack1;
            @Atack2.started -= instance.OnAtack2;
            @Atack2.performed -= instance.OnAtack2;
            @Atack2.canceled -= instance.OnAtack2;
        }

        public void RemoveCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions @Game => new GameActions(this);
    public interface IGameActions
    {
        void OnAtack1(InputAction.CallbackContext context);
        void OnAtack2(InputAction.CallbackContext context);
    }
}
