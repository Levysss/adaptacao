//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/scripts/player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""player"",
    ""maps"": [
        {
            ""name"": ""Jogador"",
            ""id"": ""ce3ecbb6-ab1e-46bb-a775-2fe7eb6e46b3"",
            ""actions"": [
                {
                    ""name"": ""movimento"",
                    ""type"": ""Value"",
                    ""id"": ""bb512dc6-9db1-4346-b9f0-d82d843b2532"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""atirar"",
                    ""type"": ""Button"",
                    ""id"": ""0023af5c-acaa-412a-8f40-0b7e5105e74e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""dfd02b21-e817-4c18-87f1-2ef7e7bec887"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movimento"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a9801318-4bc8-40e0-b324-235eeb776d1f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movimento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""47994b68-9fc9-42d8-99b4-c2b1ed740a01"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movimento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cd553d6e-e3f5-47a8-8aaf-89ca74cee009"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movimento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0c59610d-e5ce-4f38-8739-b6bedc331688"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movimento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a295654a-6e22-4573-a5c6-f23f93684307"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""atirar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Jogador
        m_Jogador = asset.FindActionMap("Jogador", throwIfNotFound: true);
        m_Jogador_movimento = m_Jogador.FindAction("movimento", throwIfNotFound: true);
        m_Jogador_atirar = m_Jogador.FindAction("atirar", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Jogador
    private readonly InputActionMap m_Jogador;
    private List<IJogadorActions> m_JogadorActionsCallbackInterfaces = new List<IJogadorActions>();
    private readonly InputAction m_Jogador_movimento;
    private readonly InputAction m_Jogador_atirar;
    public struct JogadorActions
    {
        private @Player m_Wrapper;
        public JogadorActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @movimento => m_Wrapper.m_Jogador_movimento;
        public InputAction @atirar => m_Wrapper.m_Jogador_atirar;
        public InputActionMap Get() { return m_Wrapper.m_Jogador; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JogadorActions set) { return set.Get(); }
        public void AddCallbacks(IJogadorActions instance)
        {
            if (instance == null || m_Wrapper.m_JogadorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JogadorActionsCallbackInterfaces.Add(instance);
            @movimento.started += instance.OnMovimento;
            @movimento.performed += instance.OnMovimento;
            @movimento.canceled += instance.OnMovimento;
            @atirar.started += instance.OnAtirar;
            @atirar.performed += instance.OnAtirar;
            @atirar.canceled += instance.OnAtirar;
        }

        private void UnregisterCallbacks(IJogadorActions instance)
        {
            @movimento.started -= instance.OnMovimento;
            @movimento.performed -= instance.OnMovimento;
            @movimento.canceled -= instance.OnMovimento;
            @atirar.started -= instance.OnAtirar;
            @atirar.performed -= instance.OnAtirar;
            @atirar.canceled -= instance.OnAtirar;
        }

        public void RemoveCallbacks(IJogadorActions instance)
        {
            if (m_Wrapper.m_JogadorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJogadorActions instance)
        {
            foreach (var item in m_Wrapper.m_JogadorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JogadorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JogadorActions @Jogador => new JogadorActions(this);
    public interface IJogadorActions
    {
        void OnMovimento(InputAction.CallbackContext context);
        void OnAtirar(InputAction.CallbackContext context);
    }
}
